name: CI - Booknest

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
  backend:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven
      - name: Build & verify (unit + IT)
        run: |
          chmod +x ./backend/mvnw
          ./backend/mvnw -f backend verify
      - name: Export OpenAPI spec
        run: |
          cd backend
          ./mvnw -q spring-boot:run &
          PID=$!
          until curl -s http://localhost:8080/v3/api-docs -o ../openapi.json; do sleep 2; done
          kill $PID
      - uses: actions/upload-artifact@v4
        with:
          name: openapi-spec
          path: ./openapi.json

  frontend:
    runs-on: ubuntu-latest
    needs: [ setup, backend ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: openapi-spec
          path: ./frontend
      - name: Install deps
        working-directory: ./frontend
        run: npm ci
      - name: Generate API client
        working-directory: ./frontend
        run: npm run generate:api:local && rm openapi.json
      - name: Lint & build
        working-directory: ./frontend
        run: npm run lint && npm run build

  check_changes:
    runs-on: ubuntu-latest
    needs: [ backend, frontend ]
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
    outputs:
      backend:  ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}

  deploy-backend:
    if: needs.check_changes.outputs.backend == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: check_changes
    permissions:
      id-token: write    
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region:     ${{ secrets.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push (latest + SHA)
        working-directory: ./backend
        env:
          REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          REPO:     ${{ secrets.ECR_REPOSITORY }}
        run: |
          IMAGE_BUILD="$REPO:build"
          IMAGE_LATEST="$REGISTRY/$REPO:latest"
          IMAGE_SHA="$REGISTRY/$REPO:${GITHUB_SHA}"

          # 1. Build
          docker build -t "$IMAGE_BUILD" .

          # 2. Tag
          docker tag "$IMAGE_BUILD" "$IMAGE_LATEST"
          docker tag "$IMAGE_BUILD" "$IMAGE_SHA"

          # 3. Push both
          docker push "$IMAGE_LATEST"
          docker push "$IMAGE_SHA"

      - name: Force new ECS deployment
        run: |
          aws ecs update-service \
            --cluster  ${{ secrets.ECS_CLUSTER }} \
            --service  ${{ secrets.ECS_SERVICE }} \
            --force-new-deployment
