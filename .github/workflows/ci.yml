name: CI – Booknest

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

############################ 1. detect which side changed ############################
jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend:  ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'

############################ 2. backend tests ########################################
  backend:
    if: needs.detect-changes.outputs.backend == 'true'
    needs: detect-changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven
      - name: Build & verify
        run: |
          chmod +x ./backend/mvnw
          ./backend/mvnw -f backend verify
      - name: Export OpenAPI spec
        run: |
          cd backend
          ./mvnw -q spring-boot:run &
          PID=$!
          until curl -s http://localhost:8080/v3/api-docs -o ../openapi.json; do sleep 2; done
          kill $PID
      - uses: actions/upload-artifact@v4
        with:
          name: openapi-spec
          path: ./openapi.json

############################ 3. frontend checks ######################################
  frontend:
    if: needs.detect-changes.outputs.frontend == 'true'
    needs: [ detect-changes, backend ]   # backend needed only for the OpenAPI artefact
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: ./frontend } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: openapi-spec
          path: ./frontend
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci
      - run: npm run generate:api:local && rm openapi.json
      - run: npm run lint && npm run build

############################ 4. build, tag, push, deploy #############################
  deploy-backend:
    if: |
      needs.detect-changes.outputs.backend == 'true' &&
      github.ref == 'refs/heads/main' &&
      github.event_name == 'push'
    needs: [ backend, detect-changes ]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      # ─ AWS auth ─
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region:     ${{ secrets.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2

      # ─ build once, tag latest + SHA, push both ─
      - name: Build & push image
        working-directory: ./backend
        env:
          REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          REPO:     ${{ secrets.ECR_REPOSITORY }}
        run: |
          IMAGE_BUILD="$REPO:build"
          IMAGE_LATEST="$REGISTRY/$REPO:latest"
          IMAGE_SHA="$REGISTRY/$REPO:${GITHUB_SHA}"

          docker build -t "$IMAGE_BUILD" .
          docker tag   "$IMAGE_BUILD" "$IMAGE_LATEST"
          docker tag   "$IMAGE_BUILD" "$IMAGE_SHA"
          docker push  "$IMAGE_LATEST"
          docker push  "$IMAGE_SHA"

      # ─ kick ECS so tasks pull the new 'latest' digest ─
      - name: Force new ECS deployment
        run: |
          aws ecs update-service \
            --cluster  ${{ secrets.ECS_CLUSTER }} \
            --service  ${{ secrets.ECS_SERVICE }} \
            --force-new-deployment
