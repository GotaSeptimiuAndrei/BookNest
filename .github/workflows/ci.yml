name: CI â€“ Booknest

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend:  ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4

      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'

  backend-unit-tests:
    if: needs.detect-changes.outputs.backend == 'true'
    needs: detect-changes
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: ./backend } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven
      - run: chmod +x mvnw
      - run: ./mvnw spring-javaformat:apply
      - run: ./mvnw spring-javaformat:validate
      - run: ./mvnw test -DskipITs -Dspring.profiles.active=test

  backend-integration-tests:
    if: needs.detect-changes.outputs.backend == 'true'
    needs: backend-unit-tests
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: ./backend } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven
      - run: chmod +x mvnw
      - run: ./mvnw verify -DskipUTs -Dspring.profiles.active=test

      - name: Export OpenAPI spec
        run: |
          ./mvnw -q -pl :backend -am spring-boot:run &
          SERVER_PID=$!
          until curl -s http://localhost:8080/v3/api-docs -o openapi.json; do sleep 2; done
          kill $SERVER_PID
      - uses: actions/upload-artifact@v4
        with:
          name: openapi-spec
          path: backend/openapi.json

  build-and-push-backend:
    if: needs.detect-changes.outputs.backend == 'true'
    needs: backend-integration-tests
    runs-on: ubuntu-latest
    permissions:
      id-token: write        # OIDC
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region:     ${{ secrets.AWS_REGION }}

      - uses: docker/setup-buildx-action@v3

      - uses: aws-actions/amazon-ecr-login@v2

      - id: build
        env:
          REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          REPO:     ${{ secrets.ECR_REPOSITORY }}
        run: |
          IMAGE="$REGISTRY/$REPO:${GITHUB_SHA}"
          docker build -t "$IMAGE" ./backend
          docker push "$IMAGE"
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

  deploy-backend:
    if: needs.detect-changes.outputs.backend == 'true'
    needs: build-and-push-backend
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region:     ${{ secrets.AWS_REGION }}

      - id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: infra/ecs/task-definition.json
          container-name: booknest-backend
          image: ${{ needs.build-and-push-backend.outputs.image }}

      - uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          cluster:         ${{ secrets.ECS_CLUSTER }}
          service:         ${{ secrets.ECS_SERVICE }}
          task-definition: ${{ steps.render.outputs.task-definition }}
          wait-for-service-stability: true

  frontend-checks:
    if: needs.detect-changes.outputs.frontend == 'true'
    needs: backend-integration-tests
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: ./frontend } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - uses: actions/download-artifact@v4
        with:
          name: openapi-spec
          path: ./frontend
      - run: npm ci
      - run: npm run generate:api:local && rm openapi.json
      - run: npm run lint-staged
      - run: npm run build
