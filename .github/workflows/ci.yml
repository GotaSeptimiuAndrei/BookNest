name: CI - Booknest

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'

  backend:
    if: needs.detect-changes.outputs.backend == 'true'
    needs: detect-changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven
      - run: |
          chmod +x ./backend/mvnw
          ./backend/mvnw -f backend verify
      - run: |
          cd backend
          ./mvnw -q spring-boot:run &
          PID=$!
          until curl -s http://localhost:8080/v3/api-docs -o ../openapi.json; do sleep 2; done
          kill $PID
      - uses: actions/upload-artifact@v4
        with:
          name: openapi-spec
          path: ./openapi.json

  frontend:
    if: needs.detect-changes.outputs.frontend == 'true'
    needs: [ detect-changes, backend ]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: openapi-spec
          path: ./frontend

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - run: npm ci
      - run: npm run generate:api:local && rm openapi.json

      - run: npm run lint
      - run: npm run build
      - name: Start backend
        working-directory: ./backend
        run: |
          ./mvnw -q spring-boot:run &
          echo $! > $GITHUB_WORKSPACE/backend.pid
          # Wait until actuator or docs endpoint responds
          until curl -s http://localhost:8080/actuator/health > /dev/null ; do
            sleep 5
          done

      - name: Run Cypress E2E tests
        working-directory: ./frontend
        run: npm run cy:run
        env:
          CI: true   

      - name: Stop backend
        if: always()
        run: |
          kill $(cat $GITHUB_WORKSPACE/backend.pid) || true


  deploy-backend:
    if: needs.detect-changes.outputs.backend == 'true' && github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [ backend, detect-changes ]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2
      - id: build
        working-directory: ./backend
        env:
          REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          REPO: ${{ secrets.ECR_REPOSITORY }}
        run: |
          IMAGE="$REGISTRY/$REPO:${GITHUB_SHA}"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
      - id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: infra/ecs/task-definition.json
          container-name: booknest-backend
          image: ${{ steps.build.outputs.image }}
      - uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          cluster: ${{ secrets.ECS_CLUSTER }}
          service: ${{ secrets.ECS_SERVICE }}
          task-definition: ${{ steps.render.outputs.task-definition }}
          wait-for-service-stability: true
