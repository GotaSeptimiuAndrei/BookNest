name: CI - Booknest

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

  frontend:
    runs-on: ubuntu-latest
    needs: [setup, backend]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: openapi-spec
          path: ./frontend

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Generate API client
        working-directory: ./frontend
        run: npm run generate:api:local && rm openapi.json

      - name: Lint and build
        working-directory: ./frontend
        run: npm run lint && npm run build

  backend:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven
      - name: Grant execute permission for mvnw
        run: chmod +x ./backend/mvnw
      - name: Build and test
        working-directory: ./backend
        run: ./mvnw verify
      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: ./backend/target

      - name: Export OpenAPI spec
        working-directory: ./backend
        run: |
          ./mvnw -q spring-boot:run &          
          SERVER_PID=$!
          until curl -s http://localhost:8080/v3/api-docs -o openapi.json; do sleep 2; done
          kill $SERVER_PID                    
          mv openapi.json $GITHUB_WORKSPACE   

      - name: Upload OpenAPI artifact
        uses: actions/upload-artifact@v4
        with:
          name: openapi-spec
          path: ./openapi.json

  check_changes:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
      - id: set-output
        run: |
          if [ "${{ steps.filter.outputs.backend }}" = "true" ]; then
            echo "backend_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "backend_deploy=false" >> $GITHUB_OUTPUT
          fi
          if [ "${{ steps.filter.outputs.frontend }}" = "true" ]; then
            echo "frontend_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "frontend_deploy=false" >> $GITHUB_OUTPUT
          fi
    outputs:
      backend_deploy: ${{ steps.set-output.outputs.backend_deploy }}
      frontend_deploy: ${{ steps.set-output.outputs.frontend_deploy }}

  deploy-backend:
    runs-on: ubuntu-latest
    needs: [check_changes]
    permissions:
      id-token: write  
      contents: read
    if: >
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      needs.check_changes.outputs.backend_deploy == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ./backend/target
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2
      - name: Build Docker image
        working-directory: ./backend
        run: |
          docker build -t booknest-backend:${GITHUB_SHA} .
      - name: Push Docker image to ECR
        run: |
          docker tag booknest-backend:${GITHUB_SHA} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${GITHUB_SHA}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${GITHUB_SHA}
      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --force-new-deployment

